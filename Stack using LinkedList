
import java.util.LinkedList;
import java.util.*;
class GenericStackLinked1<T>{
	private LinkedList<T> stack;
	public GenericStackLinked1(){
		stack=new LinkedList<>();
	}
	public void push(T element){
		stack.addFirst(element);
	}
	public T pop(){
		if(stack.isEmpty()){
			System.out.println("stack underflow");
			return null;
		}
		return stack.removeFirst();
	}
	public T peek(){
		if(stack.isEmpty()){
			System.out.println("Stack is Empty");
			return null;
		}
		return stack.getFirst();
	}
	public boolean isEmpty(){
		return stack.isEmpty();
	}
	public void displayStack(){
		if(stack.isEmpty()){
			System.out.println("Stack is Empty");
		}
		else{
			System.out.println("Stack Elements:"+stack);
             //System.out.print("address"+System.identityHashCode(ele));
		}
	}
}
public class GenericStackLinked{

	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
		GenericStackArray1<Integer> stringstack=new GenericStackArray1<>();
		System.out.println("Dyanmically Generic stack using LinkedList");
		while(true){
			System.out.println("\n choose an operation\n");
			System.out.println("1.push");
			System.out.println("2.pop\n");
			System.out.println("3.peek\n");
			System.out.println("4.display");
			System.out.println("5.Exit");
			int ch=sc.nextInt();
			sc.nextLine();
			switch(ch){
				case 1 :
					   System.out.print("Enter the element to push");
					   int ele=sc.nextInt();
					   stringstack.push(ele);
					  
					   break;
			   case 2:
				   		int poppedele=stringstack.pop();
			   			if(poppedele!=-1){
							System.out.println("Popped ele :"+poppedele);
						}
						break;
			  case 3:
				  		Integer topele=stringstack.peek();
			  			if(topele!=null){
							System.out.println("Top elem:"+topele);
						}
						break;
			case 4:
						stringstack.displayStack();
			             break;
			case 5:
						System.out.println("Exiting...");
						sc.close();
						return;
			default:
						System.out.println("Invalid choice");
			}
		}
	}
}
